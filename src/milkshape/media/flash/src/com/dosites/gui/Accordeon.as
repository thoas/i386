/** *[description] *<p><H1>Accordeon Class</h1> *<p> Description : *<p> Classe permettant la création d'un accordeon de n panel, chaque accordéon est construit par des clips fourni a la méthode addPanel. *	  deux mode horizontal et vertical * *@author : Jérôme LEGOFF *@date :11-2008 *@update : *@version : 0.1 * *@usage	<pre> * * * *		</pre> * *@todo		<pre> *				la possibilité de modifier les paramêtres de la tween *			</pre> **//// @condpackage com.dosites.gui{/// @endcond	/**    * Import	**/	import flash.display.*;	import flash.geom.*;	import flash.events.*;	import caurina.transitions.Tweener;	public class Accordeon extends MovieClip{		private var _myWidth:Number;		private var _myHeight:Number;		private var _navW:Number;		private var _navH:Number;		private var _panelN:uint;		private var _panelW:Number;		private var _panelH:Number;		private var _panelWithBtnWidth:Number;		private var _panelWithBtnHeight:Number;		private var _vertical:Boolean;		private var _currpanel:Number;		public static const EVENT_ON_CHANGE = "change";		/**		 * Accordeon : Constructor		 * @param panelWidth:Number [largeur des panneaux de l'accordeon]		 * @param panelHeight:Number [hauteur des panneaux de l'accordeon]		 * @param panelNumber:uint=0 [nombre de pannel]		 * @param navWidth:Number=0 [largeur des bouton de nav]		 * @param navHeight:Number=0 [hauteur des bouton de nav]		 * @param alignment:Boolean=false [vertical (true) horizontal (false)]		 */		public function Accordeon(panelWidth:Number, panelHeight:Number, panelNumber:uint=0, navWidth:Number=0,navHeight:Number=0,alignment:Boolean=false){			_vertical=alignment;			_myWidth  = panelWidth;			_myHeight = panelHeight;			_panelN = panelNumber;			_navW = navWidth;			_navH = navHeight;			_panelW = _myWidth-_panelN * _navW;			_panelH = _myHeight-_panelN * _navH;			_panelWithBtnWidth  = _panelW + _navW;			_panelWithBtnHeight = _panelH + _navH;			var mk:Sprite = new Sprite();				mk.graphics.beginFill(0xFF0000);				mk.graphics.drawRect(0,0, _myWidth, _myHeight);				mk.graphics.endFill();			this.addChild(mk);			this.mask = mk;		}		/**		 * openPanel : ouverture d'un pannel		 * @param pNumber:Number [nb du pannel]		 */		public function openPanel(pNumber:Number):void{			var obj;			var i;			// on les passe tous a on			for(i=1;i<this.numChildren;i++){				obj = this.getChildAt(i) as Sprite;				obj.getChildByName("btn").addEventListener(MouseEvent.CLICK, handleOpenClick);				obj.getChildByName("btn").buttonMode=true;				obj.getChildByName("btn").getChildByName("btOn").visible=false;				obj.getChildByName("btn").getChildByName("btOff").visible=true;			}			// on passe le sélectionné a off			obj = this.getChildAt(pNumber) as Sprite;			obj.getChildByName("btn").buttonMode=false;			obj.getChildByName("btn").removeEventListener(MouseEvent.CLICK, handleOpenClick);			obj.getChildByName("btn").getChildByName("btOn").visible=true;			obj.getChildByName("btn").getChildByName("btOff").visible=false;			// on tween			for(i=pNumber+1; i<this.numChildren;i++){				obj = this.getChildAt(i);				if (!_vertical){					Tweener.addTween(obj, {x:_myWidth-(this.numChildren-i)*_navW, time:1.0, transition:"easeOutCubic", rounded:true});				}else{					Tweener.addTween(obj, {y:_myHeight-(this.numChildren-i)*_navH, time:1.0, transition:"easeOutCubic", rounded:true});				}			}			for(i=1; i<=pNumber;i++){				obj = this.getChildAt(i);				if (!_vertical){					Tweener.addTween(obj, {x:(i-1)*_navW, time:1.0, transition:"easeOutCubic", rounded:true});				}else{					Tweener.addTween(obj, {y:(i-1)*_navH, time:1.0, transition:"easeOutCubic", rounded:true});				}			}			_currpanel=pNumber;			dispatchEvent(new Event(EVENT_ON_CHANGE));		}		/**		 * addPanel : Ajout d'un panel a l'accordeon		 * @param contMovie:MovieClip [clip du contenu du panel]		 * @param btnBackground:MovieClip [clip du bouton background par defaut du panel]		 * @param btnBackgroundOn:MovieClip  [clip du bouton en RollOver]		 * @param bgBackGround:Number = 0xFFFFFF [couleur de fond du contenu]		 */		public function addPanel(contMovie:MovieClip,btnBackground:MovieClip,btnBackgroundOn:MovieClip = null,bgBackGround:Number = 0xFFFFFF):void{			var pnl:Sprite = new Sprite();			pnl.graphics.beginFill(bgBackGround);			/////////////////			if (!_vertical) pnl.graphics.drawRect(0,0,_panelWithBtnWidth,_myHeight);			else pnl.graphics.drawRect(0,0,_myWidth,_panelWithBtnHeight);			/////////////////			pnl.graphics.endFill();			var btn:MovieClip = getBtnBase();			var msk:MovieClip = getBtnBase();			var btOn = btn.addChild(btnBackgroundOn);				btOn.visible = false;				btOn.name="btOn";			var btOff = btn.addChild(btnBackground);				btOff.visible = false;				btOff.name="btOff";			pnl.addChild(btn);			btn.addChild(msk);			btn.mask = msk;			var localcont = contMovie;			pnl.addChild(localcont);			/////////////////			if (!_vertical) localcont.x+=_navW;			else localcont.y+=_navH;			/////////////////			var contmask:MovieClip = getContentBase();			localcont.addChild(contmask);			localcont.mask = contmask;			this.addChild(pnl);			/////////////////			if (!_vertical) pnl.x= (this.numChildren-2)*_navW;			else pnl.y= (this.numChildren-2)*_navH;			/////////////////			btn._panelNumber = this.numChildren-1;			btn.mouseChildren=false;			btn.buttonMode=true;			btn.name="btn";		}		/**		 * getPanelContentsAt : retrouve le contenu en fonction du numéro Panel		 * @param i:Number [numero du panel]		 * @return flash.display.MovieClip		 */		public function getPanelContentsAt(i):MovieClip{			var obj:Sprite = this.getChildAt(i) as Sprite;			return obj.getChildAt(2) as MovieClip;			//trace(this.getChildAt(i).getChildAt(0));		}		/**		 * handleOpenClick : Handler de click sur les boutons du panel		 * @param evt:MouseEvent [Event MOUSE_CLICK]		 */		private function handleOpenClick(evt:MouseEvent):void{			if(evt.target._panelNumber){				openPanel(evt.target._panelNumber);			}		}		/**		 * handleMouseOver : Handler de MouseOver sur les boutons du panel		 * @param evt:MouseEvent [Event MOUSE_OVER]		 */		private function handleMouseOver(evt:MouseEvent):void{				if( evt.target._panelNumber == _currpanel ) {					return;				}				if(evt.target.getChildByName("btOn").visible){					evt.target.getChildByName("btOn").visible = false;					evt.target.getChildByName("btOff").visible = true;				}else{					evt.target.getChildByName("btOn").visible = true;					evt.target.getChildByName("btOff").visible = false;				}		}		/**		 * handleMouseOut : Handler de MouseOut sur les boutons du panel		 * @param evt:MouseEvent [Event MOUSE_OUT]		 */		private function handleMouseOut(evt:MouseEvent):void{				if( evt.target._panelNumber == _currpanel ) {					return;				}				if(evt.target.getChildByName("btOn").visible){					evt.target.getChildByName("btOn").visible = false;					evt.target.getChildByName("btOff").visible = true;				}else{					evt.target.getChildByName("btOn").visible = true;					evt.target.getChildByName("btOff").visible = false;				}		}		/**		 * getBtnBase : fabrique le bouton de base		 * @return flash.display.MovieClip		 */		private function getBtnBase():MovieClip{			var btn:MovieClip = new MovieClip();			var color = Math.round(Math.random()*0xFFFFFF);			btn.graphics.beginFill(color,0);			if (!_vertical) btn.graphics.drawRect(0,0,_navW,_myHeight);			else btn.graphics.drawRect(0,0,_myWidth,_navH);			btn.graphics.endFill();			btn.addEventListener(MouseEvent.MOUSE_OVER, handleMouseOver);			btn.addEventListener(MouseEvent.MOUSE_OUT, handleMouseOut);			return btn;		}		/**		 * getContentBase : fabrique le contenude base		 * @return flash.display.MovieClip		 */		private function getContentBase():MovieClip{			var cont:MovieClip = new MovieClip();			var color = Math.round(Math.random()*0xFFFFFF);			cont.graphics.beginFill(color,0.5);			if (!_vertical) cont.graphics.drawRect(0,0,_panelW,_myHeight);			else cont.graphics.drawRect(0,0,_myWidth,_panelH);			cont.graphics.endFill();			return cont;		}	}}