package com.reintroducing.forms{	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;		import com.reintroducing.events.ContactFormEvent;			/**	 * Creates a communication gateway between a contact form and a PHP script that checks for validity and sends the email.  The 	 * e-mail checking is rudimentary at best, but it gets the job done.  If someone will go through the trouble to try and break this	 * e-mail checker, then by all means spam away (at least that's the way I see it).	 * 	 * <p>The fields array should contain an object for each field.  The object will have a "field" string value, which is the	 * instance name (minus the "_txt" suffix) of the text field to check, an "error" string value which is the error text	 * that is displayed when the error events are dispatched, and a "required" boolean that checks if the field is a 	 * required field.</p>	 * 	 * <p>As of right now, the fields that are passed into the fields array should be written as the instance name of the field minus the _txt extension.	 * For example, if the instance name is name_txt, you pass "name" as the field string value in the fields array.</p>	 * 	 * <p>The class dispatches a custom ContactFormEvent depending on what happens.  The events are as follows:</p>	 * 	 * <ul>	 * <li>ContactFormEvent.ON_EMAIL_ERROR: Dispatched if the e-mail check returns an incorrect e-mail address (params object contains field name, error text, and error ID)</li>	 * <li>ContactFormEvent.ON_INVALID_ERROR: Dispatched when a required field fails the check (params object contains field name, error text, and error ID)</li>	 * <li>ContactFormEvent.ON_SUCCESS: Dispatched when the message has been successfully sent</li>	 * <li>ContactFormEvent.ON_FAILED: Dispatched if the server is unable to deliver the message (params object contains IOErrorEvent)</li>	 * </ul>	 * 	 * @author Matt Przybylski [http://www.reintroducing.com]	 * @version 1.0	 */	public class ContactForm extends EventDispatcher	{//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------		private var _fields:Array;		private var _numFields:Number;		private var _scriptURL:String;		private var _scriptRequest:URLRequest;		private var _scriptLoader:URLLoader;		private var _scriptVars:URLVariables;		private var _email:String;		private var _subject:String;		//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------				public static const DEFAULT_NAME:String = "com.reintroducing.forms.ContactForm";		//- CONSTRUCTOR	-------------------------------------------------------------------------------------------			/**		 * Creates a new instance of the ContactForm class.  The events ContactFormEvent.ON_EMAIL_ERROR and ContactFormEvent.ON_INVALID_ERROR will be dispatched if		 * there is an error with the e-mail field or any other required field.  The errors that will be shown are defined in the		 * fields array.		 * 		 * @param $fields An array that tells the form what fields to check, what errors to display, and if the field is required or not		 * @param $scriptURL A string that represents the path on the server to the PHP script		 * @param $email A string representing an e-mail address that the script will send the information to		 * @param $subject A string representing the subject of the e-mail being sent		 * 		 * @return void		 */				public function ContactForm($fields:Array, $scriptURL:String, $email:String, $subject:String):void		{			this._fields 			= $fields;			this._numFields			= this._fields.length;			this._scriptURL			= $scriptURL;			this._email				= $email;			this._subject			= $subject;		}//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------				private function validateEmail($str:String):Boolean		{			if ($str != null && $str != " " && $str != ""  && $str.indexOf("@") != -1)			{			    var after_at:Array = $str.split("@");			    			    if (after_at[1] != "" && after_at[1] != " " && after_at[1] != null && after_at[1].indexOf(".") != -1)			    {				    var after_periods:Array = after_at[1].split(".");									    if (after_at.length != 2) return false;				    if (after_periods[1].length < 2 || after_periods[1].length > 3) return false;			    }			    else			    {			    	return false;			    }			}			else			{				return false;			}		   		    return true;		}				// check the fields in the form and validate them		private function checkForm($r:MovieClip):Boolean		{			var missing:Boolean;						for (var i:uint = 0; i < this._numFields; i++)			{				if (this._fields[i].field == "email" && this._fields[i].required)				{					// check the email field for validation					if (!this.validateEmail($r[this._fields[i].field + "_txt"].text))					{						missing = true;												var params1:Object = new Object();						params1.field = this._fields[i].field;						params1.error = this._fields[i].error;						params1.errorID = i;												var evt1:ContactFormEvent = new ContactFormEvent(ContactFormEvent.ON_EMAIL_ERROR, params1);						this.dispatchEvent(evt1);					}				}								// check all other fields to see if they have something in them				if ($r[this._fields[i].field + "_txt"].text == "" && this._fields[i].field != "email" && this._fields[i].required)				{					missing = true;										var params2:Object = new Object();					params2.field = this._fields[i].field;					params2.error = this._fields[i].error;					params2.errorID = i;										var evt2:ContactFormEvent = new ContactFormEvent(ContactFormEvent.ON_INVALID_ERROR, params2);					this.dispatchEvent(evt2);				}			}						// if missing is true, return false; otherwise return true			return missing ? false : true;		}		//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------			/**		 * Checks the form and dispatches the appropriate event according to what is happening.		 * 		 * @param $timeline The timeline that the fields/clips for the form are located on		 * 		 * @return void		 */		public function sendMessage($timeline:MovieClip):void		{			var formValid:Boolean 	= this.checkForm($timeline);						this._scriptRequest 	= new URLRequest(this._scriptURL + "?ck=" + new Date().getTime());			this._scriptLoader 		= new URLLoader();			this._scriptVars 		= new URLVariables();						this._scriptLoader.addEventListener(Event.COMPLETE, handleLoadSuccessful);			this._scriptLoader.addEventListener(IOErrorEvent.IO_ERROR, handleLoadError);						if (formValid)			{				// pass the email and subject that you are sending				this._scriptVars.to = this._email;				this._scriptVars.subject = this._subject;								// pass the appropriate values to the php form for submission				for (var i:uint = 0; i < this._numFields; i++)				{					this._scriptVars[this._fields[i].field] = $timeline[this._fields[i].field + "_txt"].text;				}								this._scriptRequest.method = URLRequestMethod.POST;				this._scriptRequest.data = this._scriptVars;								this._scriptLoader.load(this._scriptRequest);			}		}	//- EVENT HANDLERS ----------------------------------------------------------------------------------------			private function handleLoadSuccessful($evt:Event):void		{			var evt:ContactFormEvent = new ContactFormEvent(ContactFormEvent.ON_SUCCESS, {});			this.dispatchEvent(evt);		}				private function handleLoadError($evt:IOErrorEvent):void		{			var evt:ContactFormEvent = new ContactFormEvent(ContactFormEvent.ON_FAILED, {event: $evt});			this.dispatchEvent(evt);		}	//- GETTERS & SETTERS -------------------------------------------------------------------------------------				//- HELPERS -----------------------------------------------------------------------------------------------			public override function toString():String		{			return "com.reintroducing.forms.ContactForm";		}	//- END CLASS ---------------------------------------------------------------------------------------------	}}